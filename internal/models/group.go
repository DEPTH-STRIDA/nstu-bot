package models

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"gorm.io/gorm"
)

// Group –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É groups
type Group struct {
	gorm.Model

	HolderID   uint   `gorm:"column:holder_id"`
	HolderTgID uint   `gorm:"column:holder_tg_id"`
	Holder     User   `gorm:"foreignKey:HolderID"`
	Name       string `gorm:"column:name;not null"`
	Title      string `gorm:"column:title"`

	StartDate          *time.Time `gorm:"column:start_date"`
	IsAlternatingGroup bool       `gorm:"column:is_alternating_group;default:false"`
	EvenWeek           string     `gorm:"column:even_week;type:jsonb"`
	OddWeek            string     `gorm:"column:odd_week;type:jsonb"`
}

// TableName –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è Group
func (Group) TableName() string {
	return "groups"
}

type WeekSchedule struct {
	Monday    [][]string `json:"monday,omitempty"`
	Tuesday   [][]string `json:"tuesday,omitempty"`
	Wednesday [][]string `json:"wednesday,omitempty"`
	Thursday  [][]string `json:"thursday,omitempty"`
	Friday    [][]string `json:"friday,omitempty"`
	Saturday  [][]string `json:"saturday,omitempty"`
	Sunday    [][]string `json:"sunday,omitempty"`
}

func GetScheduleOnDate(targetDate time.Time, group *Group) ([][]string, error) {
	if group == nil || group.StartDate == nil {
		return nil, errors.New("invalid group or start date")
	}

	dayOfWeek := targetDate.Weekday()

	var schedule WeekSchedule
	var weekJSON string

	if !group.IsAlternatingGroup {
		weekJSON = group.EvenWeek
	} else {
		weeks := int(targetDate.Sub(*group.StartDate).Hours() / 168) // 168 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª–µ
		if weeks%2 == 0 {
			weekJSON = group.EvenWeek
		} else {
			weekJSON = group.OddWeek
		}
	}

	err := json.Unmarshal([]byte(weekJSON), &schedule)
	if err != nil {
		return nil, err
	}

	switch dayOfWeek {
	case time.Monday:
		return schedule.Monday, nil
	case time.Tuesday:
		return schedule.Tuesday, nil
	case time.Wednesday:
		return schedule.Wednesday, nil
	case time.Thursday:
		return schedule.Thursday, nil
	case time.Friday:
		return schedule.Friday, nil
	case time.Saturday:
		return schedule.Saturday, nil
	case time.Sunday:
		return schedule.Sunday, nil
	default:
		return nil, errors.New("invalid day of week")
	}
}

func GetDaySheduleByWeekDay(sheduleWeek string, weekDay int) ([][]string, error) {
	if sheduleWeek == "" {
		return nil, errors.New("invalid sheduleWeek")
	}

	var schedule WeekSchedule
	var weekJSON string

	err := json.Unmarshal([]byte(weekJSON), &schedule)
	if err != nil {
		return nil, err
	}

	switch weekDay {
	case 0:
		return schedule.Monday, nil
	case 1:
		return schedule.Tuesday, nil
	case 2:
		return schedule.Wednesday, nil
	case 3:
		return schedule.Thursday, nil
	case 4:
		return schedule.Friday, nil
	case 5:
		return schedule.Saturday, nil
	case 6:
		return schedule.Sunday, nil
	default:
		return nil, errors.New("invalid day of week")
	}
}

func FormatDaySchedule(schedule [][]string) string {
	str := ""

	for i, subject := range schedule {
		// –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 –ø–æ–ª—è: –≤—Ä–µ–º—è, –ø—Ä–µ–¥–º–µ—Ç, –∞—É–¥–∏—Ç–æ—Ä–∏—è
		if len(subject) != 3 {
			continue
		}
		str += "<strong>" + fmt.Sprint(i) + ". üï¶" + subject[0] + ". üö©" + subject[1] + "</strong> - " + subject[2]
	}

	return str
}

func FormatAllSchedule(group *Group) string {
	str := ""
	// –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–æ–¥–∏—á–Ω–∞
	if !group.IsAlternatingGroup {
		str += "<strong>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</strong>\n\n"

	} else {
		str += "<strong>–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è</strong>\n"
		// –û–±—Ö–æ–¥  –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
		for i := 0; i < 7; i++ {

			// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
			shedule, err := GetDaySheduleByWeekDay(group.OddWeek, i)
			if err != nil {
				continue
			}

			// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
			for i, subject := range shedule {
				// –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 –ø–æ–ª—è: –≤—Ä–µ–º—è, –ø—Ä–µ–¥–º–µ—Ç, –∞—É–¥–∏—Ç–æ—Ä–∏—è
				if len(subject) != 3 {
					continue
				}
				str += "<strong>" + fmt.Sprint(i) + ". üï¶" + subject[0] + ". üö©" + subject[1] + "</strong> - " + subject[2]
			}
		}

	}
	if group.IsAlternatingGroup {
		str += "<strong>–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è</strong>\n"
	}
	// –û–±—Ö–æ–¥  –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
	for i := 0; i < 7; i++ {

		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
		shedule, err := GetDaySheduleByWeekDay(group.EvenWeek, i)
		if err != nil {
			continue
		}

		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		for i, subject := range shedule {
			// –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 –ø–æ–ª—è: –≤—Ä–µ–º—è, –ø—Ä–µ–¥–º–µ—Ç, –∞—É–¥–∏—Ç–æ—Ä–∏—è
			if len(subject) != 3 {
				continue
			}
			str += "<strong>" + fmt.Sprint(i) + ". üï¶" + subject[0] + ". üö©" + subject[1] + "</strong> - " + subject[2]
		}
	}

	return str
}

func GetDayOfWeekInRussian(date time.Time) string {
	daysOfWeek := []string{
		"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
		"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
		"–≤—Ç–æ—Ä–Ω–∏–∫",
		"—Å—Ä–µ–¥–∞",
		"—á–µ—Ç–≤–µ—Ä–≥",
		"–ø—è—Ç–Ω–∏—Ü–∞",
		"—Å—É–±–±–æ—Ç–∞",
	}

	// time.Weekday() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 0 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –¥–æ 6 (—Å—É–±–±–æ—Ç–∞)
	dayIndex := int(date.Weekday())

	return daysOfWeek[dayIndex]
}
