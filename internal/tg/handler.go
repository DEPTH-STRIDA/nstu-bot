package tg

import (
	"nstu/internal/logger"
	"nstu/internal/models"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type HandlerFunc func(app *BotStruct, update tgbotapi.Update) error

const (
	helloMsgText = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

üóì –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞" –∏–ª–∏ "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
- –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: 14.03.2023 –∏–ª–∏ 14-03-2023
- –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: 14.03 –∏–ª–∏ 14-03

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏:
- –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–æ–≤ ‚Äî –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è

üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
- /open - –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é
- /close - –∑–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é
- /menu - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –≤–µ–± –º–µ–Ω—é

‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é:
- –°–µ–≥–æ–¥–Ω—è - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
- –ó–∞–≤—Ç—Ä–∞ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
- –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
- –í–æ–π—Ç–∏ –≤ –º–µ–Ω—é - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –≤–µ–± –º–µ–Ω—é

üí° –°–æ–≤–µ—Ç: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!

üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /open –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
`
)

// handleStartMessage –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
func HandleStartMessage() HandlerFunc {
	return func(app *BotStruct, update tgbotapi.Update) error {

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, helloMsgText)
		msg.ParseMode = "html"
		sendedMsg, err := app.SendMessage(msg)
		if err != nil {
			logger.Log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
			return err
		}

		// –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫—Ä–µ–ø–æ–≤
		unpinConfig := tgbotapi.UnpinAllChatMessagesConfig{
			ChatID:          update.Message.Chat.ID,
			ChannelUsername: update.Message.From.UserName,
		}
		_, err = app.BotAPI.Request(unpinConfig)
		if err != nil {
			return err
		}

		if update.Message.Chat.IsGroup() {
			return nil
		}

		// –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		pinConfig := tgbotapi.PinChatMessageConfig{
			ChatID:              update.Message.Chat.ID,
			MessageID:           sendedMsg.MessageID,
			DisableNotification: false, // –ï—Å–ª–∏ true, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
		}

		_, err = app.BotAPI.Request(pinConfig)
		if err != nil {
			return err
		}

		return nil
	}
}

func HandleSchedule(date time.Time) HandlerFunc {
	return func(app *BotStruct, update tgbotapi.Update) error {

		loc, err := time.LoadLocation("Europe/Moscow")
		if err != nil {
			logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è : ", err)
		}

		date = date.In(loc)

		userId := update.Message.From.ID

		msgText := ""

		user, err := models.DataBase.GetUser(userId)
		if err != nil {
			logger.Log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î: ", err)

			_, err = app.SendMessage(
				tgbotapi.NewMessage(update.Message.Chat.ID,
					"–ü–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
				))
			if err != nil {
				logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
			}
			return err
		}

		if *user.ConsistsOf == 0 {
			logger.Log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î: ", err)

			_, err = app.SendMessage(
				tgbotapi.NewMessage(update.Message.Chat.ID,
					"–ü–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
				))
			if err != nil {
				logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
			}
			return err
		}

		group, err := models.DataBase.GetGroup(int64(*user.ConsistsOf))
		if err != nil {
			logger.Log.Info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", err)
			msgText = "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã."
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
		msg.ParseMode = "html"

		shedule, err := models.GetScheduleOnDate(date, group)
		if err != nil {
			logger.Log.Info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å: ", err)
			msgText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
		}

		if err == nil {
			msgText += "<strong>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + date.Format("02.01.2006") + "(+" + models.GetDayOfWeekInRussian(date) + ")</strong>"
			msgText += models.FormatDaySchedule(shedule)
		}

		_, err = app.SendMessage(msg)
		if err != nil {
			logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
		}

		return nil
	}
}

func HandleAllSchedule() HandlerFunc {
	return func(app *BotStruct, update tgbotapi.Update) error {
		userId := update.Message.From.ID
		msgText := ""

		user, err := models.DataBase.GetUser(userId)
		if err != nil {
			logger.Log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î: ", err)

			_, err = app.SendMessage(
				tgbotapi.NewMessage(update.Message.Chat.ID,
					"–ü–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
				))
			if err != nil {
				logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
			}
			return err
		}
		if *user.ConsistsOf == 0 {
			logger.Log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î: ", err)

			_, err = app.SendMessage(
				tgbotapi.NewMessage(update.Message.Chat.ID,
					"–ü–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É",
				))
			if err != nil {
				logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
			}
			return err
		}

		group, err := models.DataBase.GetGroup(int64(*user.ConsistsOf))
		if err != nil {
			logger.Log.Info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", err)
			msgText = "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã."
		}

		if err == nil {
			msgText += "<strong>–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</strong>"
			msgText += models.FormatAllSchedule(group)
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)

		_, err = app.SendMessage(msg)
		if err != nil {
			logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
		}

		return nil
	}
}

func HandleClose() HandlerFunc {
	return func(app *BotStruct, update tgbotapi.Update) error {

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞–∫—Ä—ã—Ç–æ")
		removeKeyboard := tgbotapi.NewRemoveKeyboard(true)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		msg.ReplyMarkup = removeKeyboard

		_, err := app.SendMessage(msg)
		if err != nil {
			logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
		}

		return nil
	}
}

func HandleOpen() HandlerFunc {
	return func(app *BotStruct, update tgbotapi.Update) error {

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—Ç–∫—Ä—ã—Ç–æ")

		removeKeyboard := CreateReplyKeyboard([][]ButtonData{
			{
				{Text: "–°–µ–≥–æ–¥–Ω—è", Data: "–°–µ–≥–æ–¥–Ω—è"},
				{Text: "–ó–∞–≤—Ç—Ä–∞", Data: "–ó–∞–≤—Ç—Ä–∞"},
			},
			{
				{Text: "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", Data: "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"},
				{Text: "–í–æ–π—Ç–∏ –≤ –º–µ–Ω—é", Data: "–í–æ–π—Ç–∏ –≤ –º–µ–Ω—é"},
			},
		})

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		msg.ReplyMarkup = removeKeyboard

		_, err := app.SendMessage(msg)
		if err != nil {
			logger.Log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err)
		}

		return nil
	}
}

func HandleEnterMenu() HandlerFunc {
	return func(app *BotStruct, update tgbotapi.Update) error {

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ß—Ç–æ–±—ã, –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É")
		row := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonURL("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "https://www.youtube.com/watch?v=2_bWhf5SdtI&t=721s"),
		}
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(row)
		msg.ParseMode = "html"

		_, err := app.SendMessage(msg)
		if err != nil {
			return err
		}

		return nil
	}
}
